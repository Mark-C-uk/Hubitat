definition(
	name: "Whats on",
	namespace: "Mark-c-uk",
	author: "Mark C",
	description: "check what is on",
	category: "Convenience",
	iconUrl: "",
	iconX2Url: ""
)

preferences {
	page(name: "mainPage")
}

Map mainPage() {
	dynamicPage(name: "mainPage", title: "Setup", uninstall: true, install: true) {
		section {
			input "appName", "text", title: "Name this instance whats on", submitOnChange: true
			if(appName) app.updateLabel(appName)
			input "switches", "capability.switch", title: "Switches to check", multiple: true
            input "therms", "capability.thermostat", title: "Therm to check", multiple: true
			paragraph "For the trigger use a Virtual Switch with auto-off enabled, turning it on checks switches above"
			input "trigger", "capability.switch", title: "Trigger switch"
            input "dataName", "text", title: "Enter a name for the Data Device", required:true, submitOnChange:true
                paragraph "A device will automaticaly be created for you as soon as you click outside of this field"
                if(dataName) createDataChildDevice()
            input "dataDev", "capability.actuator", title: "Data Device", multiple: false
            input "logEnable", "bool", title: "Enable debug logging", defaultValue: false
		}
	}
}

void updated() { 
    unsubscribe()
	initialize()
}

void installed() {
	initialize()
}

void initialize() {
	subscribe(trigger, "switch.on", handler)
    log.info "${app.label} starting up, running handler in 5"
    runIn (5, handler)
}

void handler(evt) {
    if (logEnable == true) log.trace "${app.label} - handler processing"
    String whichOn = '<pre align="left">'

    whichOn += '<p>Therm</p>'
    therms?.each{
			if(it.currentThermostatMode != "off") {
                whichOn += "${it}\n"
                //whichOn << it
            }
    }

    Map switchesMap = [:]
    switches?.each{
        switchesMap << ["${it.device.displayName}":"${it.currentSwitch}"]
    }
    whichOn += '<p>Switches</p>'
    switchesMap?.sort().each{ key, value ->
        if (logEnable == true) log.debug "${app.label} - sorted $key $value"
        if (value == "on"){
            whichOn += "${key}\n"
        }
    }
    
    whichOn    += "</pre>"
    
    theCount = whichOn.size()
    if (logEnable == true) log.debug "${app.label} - char count $theCount"
    if (theCount > 1024) {
        whichOn = "to many devices are on"
        log.warn "${app.label} - char count $theCount"
    }
    
    if (logEnable == true) log.debug "${app.label} - final data $whichOn"
    dataDev.parse(whichOn)
    whichOn = null
    switchesMap = null
}

def createDataChildDevice() {    
    if (logEnable == true) log.debug "${app.label} - In createDataChildDevice"
    String statusMessageD = ""
    if(!getChildDevice(dataName)) {
        if (logEnable == true) log.debug "${app.label} - In createDataChildDevice - Child device not found - Creating device: ${dataName}"
        try {
            addChildDevice("Mark-C-UK", "Whats On Tile", dataName, 1234, ["name": "${dataName}", isComponent: false])
            if (logEnable == true) log.debug "${app.label} - In createDataChildDevice - Child tile device has been created! (${dataName})"
            statusMessageD = "<b>Device has been been created. (${dataName})</b>"
        } catch (e) { log.debug "${app.label} - unable to create data device - ${e}" }
    } else {
        statusMessageD = "<b>Device Name (${dataName}) already exists.</b>"
    }
    return statusMessageD
}

