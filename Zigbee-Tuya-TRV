/**
 *  Date: 2020-12-01
 */

import hubitat.helper.HexUtils

metadata {
	definition (name: "Zigbee - Tuya TRV", namespace: "Mark-C-uk", author: "MarkC") {
        capability "Configuration"
        capability "TemperatureMeasurement"
        capability "Thermostat"
        capability "ThermostatHeatingSetpoint"
        capability "ThermostatCoolingSetpoint"
        capability "ThermostatSetpoint"
        capability "Refresh"
        
        attribute "valve", "String"
        
        
///to do		fingerprint profileId: "0104", endpointId: "19", inClusters: " 0000,0003,0201,0204", outClusters: "0402"
    }
    
    preferences {
        //input("lock", "enum", title: "Do you want to lock your thermostat's physical keypad?", options: ["No", "Yes"], defaultValue: "No", required: false, displayDuringSetup: false)
        input name: "infoLogging", type: "bool", title: "Enable info logging", defaultValue: true
    }
}
    

ArrayList<String> parse(String description) {
    //log.debug "parse $description"
    ArrayList<String> cmd = []
    Map msgMap = null
    if(description.indexOf('encoding: 4C') >= 0) {
        msgMap = zigbee.parseDescriptionAsMap(description.replace('encoding: 4C', 'encoding: F2'))
        msgMap = unpackStructInMap(msgMap)
        log.warn "parse 1 encoding: 4C >= 0"
    } 
    else if(description.indexOf('attrId: FF01, encoding: 42') >= 0) {
        msgMap = zigbee.parseDescriptionAsMap(description.replace('encoding: 42', 'encoding: F2'))
        msgMap["encoding"] = "41"
        msgMap["value"] = parseXiaomiStruct(msgMap["value"], isFCC0=false, hasLength=true)
        log.warn "parse 2 attrId: FF01 encoding: 4C >= 0"
    } 
    else {
        if(description.indexOf('encoding: 42') >= 0) {
            List values = description.split("value: ")[1].split("(?<=\\G..)")
            String fullValue = values.join()
            Integer zeroIndex = values.indexOf("01")
                if(zeroIndex > -1) {
                    msgMap = zigbee.parseDescriptionAsMap(description.replace(fullValue, values.take(zeroIndex).join()))
                    values = values.drop(zeroIndex + 3)
                    msgMap["additionalAttrs"] = [
                    ["encoding": "41",
                    "value": parseXiaomiStruct(values.join(), isFCC0=false, hasLength=true)]
                    ]
                    log.warn "warn 3-1-1"
                } 
                else {
                    msgMap = zigbee.parseDescriptionAsMap(description)
                    log.warn "used for refresh parse 3b"
                }
        log.warn "used for refresh - parse 3-1-2 encoding: 4C >= 0"
        } 
        else {
            ///used
            msgMap = zigbee.parseDescriptionAsMap(description)
               //log.warn "used for refresh - else parse 3-1-3 encoding: 4C >= 0"
            //used
        }
    
        if(msgMap.containsKey("encoding") && msgMap.containsKey("value") && msgMap["encoding"] != "41" && msgMap["encoding"] != "42") {
            log.debug "testing refresh - ${description}"
            
            //msgMap["valueParsed"] = zigbee_generic_decodeZigbeeData(msgMap["value"], msgMap["encoding"])
        }
        
        if(msgMap == [:] && description.indexOf("zone") == 0) {
            msgMap["type"] = "zone"
            java.util.regex.Matcher zoneMatcher = description =~ /.*zone.*status.*0x(?<status>([0-9a-fA-F][0-9a-fA-F])+).*extended.*status.*0x(?<statusExtended>([0-9a-fA-F][0-9a-fA-F])+).*/
            if(zoneMatcher.matches()) {
                  msgMap["parsed"] = true
                  msgMap["status"] = zoneMatcher.group("status")
                  msgMap["statusInt"] = Integer.parseInt(msgMap["status"], 16)
                  msgMap["statusExtended"] = zoneMatcher.group("statusExtended")
                  msgMap["statusExtendedInt"] = Integer.parseInt(msgMap["statusExtended"], 16)
            } 
            else {
               msgMap["parsed"] = false
            }
        }
    }

    switch(msgMap["cluster"] + '_' + msgMap["attrId"]) {
        case "0000_0001":
            log.trace("Application ID Received")
            if(msgMap['value']) {
                updateDataValue("application", msgMap['value'])
            }
            break
        case "0000_0004":
        log.trace("Manufacturer Name Received ${msgMap['value']}")
            if(msgMap['value']) {
                updateDataValue("manufacturer", msgMap['value'])
            }
            break
        case "0000_0005":
            log.trace("Model Name Received")
            if(msgMap['value']) {
                updateDataValue('model', msgMap['value'])
            }    
            break
        default:
            switch(msgMap["clusterId"]) {
                case "0013":
                    logging("MULTISTATE CLUSTER EVENT")
                    break
                case "8021":
                    logging("BIND RESPONSE CLUSTER EVENT")
                    break
                case "8001":
                    logging("GENERAL CLUSTER EVENT")
                    break
                case "8004":
                    log.trace("Simple Descriptor Information Received - description:${description} | parseMap:${msgMap}")
                    updateDataFromSimpleDescriptorData(msgMap["data"])
                    break
                case "8031":
                    logging("Link Quality Cluster Event - description:${description} | parseMap:${msgMap}")

                    break
                case "8032":
                    logging("Routing Table Cluster Event - description:${description} | parseMap:${msgMap}")
                    break
                case "8021":
                case "8038":
                    logging("GENERAL CATCHALL (0x${msgMap["clusterId"]}")
                    break
                //////////////////////////////////////////////////////////////////////////////MC
                case "EF00":  
                    //log.debug "clutsInt= ${msgMap[clusterInt]} ,att ID ${msgMap["attrId"]}, cluster ${msgMap["clusterId"]} -- ${msgMap}"
                    List data = msgMap['data']
                    if (data[2] && data[3]){
                        String commandType = data[2] + data[3]
                        switch(commandType){
                            case "0202": //set point temp
                                String SetPoint = HexUtils.hexStringToInt(data[9]) / 10
                                logging("${device.displayName} Temp Set Point ${commandType}, data9 ${SetPoint}")
                                sendEvent(name: "heatingSetpoint", value: SetPoint, unit: "C")
	                            sendEvent(name: "thermostatSetpoint", value: SetPoint, unit: "C")
                                if (device.currentValue("thermostatMode") != "off" && SetPoint.toFloat() > device.currentValue("temperature").toFloat()) { 
                                    sendEvent(name: "thermostatOperatingState", value: "heating")}
                                else { sendEvent(name: "thermostatOperatingState", value: "idle")}
                                break
                            
                            case '0302': //Temparature
                                String temperature = HexUtils.hexStringToInt(data[9])/ 10
                                logging("${device.displayName} Temp ${temperature}, data ${msgMap["data"]}")
                                sendEvent(name: "temperature", value: temperature, unit: "C" )
                                if (device.currentValue("thermostatMode") != "off" && temperature.toFloat() < device.currentValue("thermostatSetpoint").toFloat()) {
                                    sendEvent(name: "thermostatOperatingState", value: "heating")}
                                else { sendEvent(name: "thermostatOperatingState", value: "idle")}
                                break
                            
                            case '0404': // Mode
                                String mode = HexUtils.hexStringToInt(data[6])
                            logging("${device.displayName} mode Code=${mode}")
                                switch (mode){
                                    case '0':
                                        sendEvent(name: "thermostatMode", value: "off" )
                                    break
                                    case '1':
                                        sendEvent(name: "thermostatMode", value: "auto" , descriptionText:"internal programming of device")
                                    break
                                    case '2':
                                        sendEvent(name: "thermostatMode", value: "heat" )
                                    break
                                }
                                break
       ///// battery --- DEV
                            case '0215':
                                String values = data.collect{c -> HexUtils.hexStringToInt(c)}
                                //logging("${device.displayName} battery ${}")
                                log.warn "reserch tuya battery ${values}"
                                //sendEvent(name: "battery", value: TBC, unit:"%" )
                                // 6702 - [68, 13, 103, 2, 0, 4, 0, 0, 0, 35] ?3.5 volt?
                            break
                            
                            case '6D02': // Valve position
                                String valve = HexUtils.hexStringToInt(data[9])
                                logging("tuya valve position ${valve}")
                                sendEvent(name: "valve", value: valve, unit: "%", descriptionText: "Valve open ${valve}%")
                            break
        //// Temperature correction reporting ---DEV   
                            case '2C02': //Temperature correction reporting
                                String temperatureCorr = HexUtils.hexStringToInt(data[9])/ 10
                                logging("${device.displayName} Temp correction reporting DEV STILL, ${temperatureCorr}, data ${msgMap["data"]}")
                            break
         // Child lock --- DEV                   
                            case '0701': // Child lock
                                String locked = HexUtils.hexStringToInt(data[6])
                                logging("${device.displayName} child lock ${commandType}, raw=${msgMap} data=${data} ,dec=${mode}")
                                switch (locked){
                                    case '0':
                                        sendEvent(name: "childLock", value: "off" )
                                    break
                                    case '1':
                                    sendEvent(name: "childLock", value: "on")
                                    break
                                }
                            break
                            case '7401': // auto lock setting A3
                                String autolock = HexUtils.hexStringToInt(data[6])
                                switch (autolock){
                                    case '0':
                                        logging("${device.displayName} Auto lock A3 Off")
                                    break
                                    case '1':
                                    logging("${device.displayName} Auto lock A3 On ather 10min")
                                    break
                                }
                            break
                            case '6800': //window open detection
                                logging("${device.displayName} window open detection ${data[7]}deg in ${data[8]}min will trigger shutdown")
                            break
                            
                           case '6902': //boost -- Dev
                                String values = data.collect{c -> HexUtils.hexStringToInt(c)}
                                logging("${device.displayName} boost ${values}")
                            break
                            
                            case '7000': // schedule setting aka Auto mode -- Dev
                            logging("${device.displayName} schedual P1 ${data[6]}:${data[7]} = ${data[8]}deg , ${data[9]}:${data[10]} = ${data[11]}deg ,more ${data} ")
                            break
                            
                            case '7001': // schedule setting aka Auto mode -- Dev
                                logging("${device.displayName} schedual P2 ${data[6]}:${data[7]} = ${data[8]}deg , ${data[9]}:${data[10]} = ${data[11]}deg ,more ${data} ")
                            break
                            
                            default:
                                String values = data.collect{c -> HexUtils.hexStringToInt(c)}
                                log.debug "${device.displayName} other EF00 cluster - ${commandType} - ${values} "
                                break
                        }
                    }
                    else { 
                        // found data in map of, data:[02, 19]], data:[00, 00]]
                        //logging("other cluster EF00 but map null- ${msgMap}", 100)
                    }
                    break
                
                /////////////////////////////////////////////////////////////////////////////////////////mc
                default:
                    //log.debug "Unhandled Event IGNORE THIS - description:${description} | msgMap:${msgMap}"
                    break
            }
            break
    }
    msgMap = null
    return cmd
}



def logsOff(){
    log.warn "debug logging disabled..."
    device.updateSetting("logEnable",[value:"false",type:"bool"])
}
// from markus toolbox driver
Map unpackStructInMap(Map msgMap, String originalEncoding="4C") {
     
    msgMap['encoding'] = originalEncoding
    List<String> values = msgMap['value'].split("(?<=\\G..)")
    logging("unpackStructInMap() values=$values", 1)
    Integer numElements = Integer.parseInt(values.take(2).reverse().join(), 16)
    values = values.drop(2)
    List r = []
    Integer cType = null
    List ret = null
    while(values != []) {
        cType = Integer.parseInt(values.take(1)[0], 16)
        values = values.drop(1)
        ret = zigbee_generic_convertStructValueToList(values, cType)
        r += ret[0]
        values = ret[1]
    }
    if(r.size() != numElements) throw new Exception("The STRUCT specifies $numElements elements, found ${r.size()}!")
     
    msgMap['value'] = r
    return msgMap
}

// BEGIN:getLoggingFunction()
private boolean logging(message) {
    boolean didLogging = false
     
    Integer logLevelLocal = 0
    if (infoLogging == null || infoLogging == true) {
        log.info "$message"
        didLogging = true
    }
    return didLogging
}
// END:  getLoggingFunction()

//end markus toobox ////////////////////




////////////////////////////////////////////////////////////////////////////

def refresh() {
    //def dp = "0404"
    //def fn = "0001"
    //def data = "00" // ??
    //log.info "Off command ${dp}${fn}${data}"    
    //zigbee.command(CLUSTER_TUYA, SETDATA, "00" + zigbee.convertToHexString(rand(256), 2) + dp + fn + data)
	//zigbee.readAttribute(CLUSTER_TUYA, 0x00, )
    //zigbee.readAttribute(0x0000, 0x0005)
    //zigbee.readAttribute(0x0000)
    
    // ????????private getPOWER_ATTR_BATTERY_PERCENTAGE_REMAINING() { 0x0021 }
}    



def configure(){    
    log.warn "configure..."
    runIn(1800,logsOff)    
	//binding to Thermostat cluster"
    
    // Set unused default values (for Google Home Integration)
    sendEvent(name: "coolingSetpoint", value:getTemperature("0BB8")) // 0x0BB8 =  30 Celsius
    sendEvent(name: "thermostatFanMode", value:"auto")
    updateDataValue("lastRunningMode", "heat") // heat is the only compatible mode for this device
/*    
    def cmds = [
    //bindings
        "zdo bind 0x${device.deviceNetworkId} 1 0x019 0x201 {${device.zigbeeId}} {}", "delay 200"
        ]
    
    //reporting
    cmds += zigbee.configureReporting(0x201, 0x0000, 0x29, 10, 60, 50)   //Attribute ID 0x0000 = local temperature, Data Type: S16BIT
    cmds += zigbee.configureReporting(0x201, 0x0008, 0x20, 10, 900, 5)   //Attribute ID 0x0008 = pi heating demand, Data Type: U8BIT
    cmds += zigbee.configureReporting(0x201, 0x0012, 0x29, 1, 0, 50)     //Attribute ID 0x0012 = occupied heat setpoint, Data Type: S16BIT
    cmds += zigbee.configureReporting(0x201, 0x001C, 0x30, 1, 0, 1)      //Attribute ID 0x001C = system mode, Data Type: 8 bits enum
    cmds += zigbee.configureReporting(0x201, 0x401C, 0x30, 1, 0, 1, [mfgCode: "0x1185"])   	   //Attribute ID 0x401C = manufacturer specific setpoint mode, Data Type: 8 bits enum
    
    cmds += zigbee.configureReporting(0x204, 0x0000, 0x30, 1, 0)   	  //Attribute ID 0x0000 = temperature display mode, Data Type: 8 bits enum
    cmds += zigbee.configureReporting(0x204, 0x0001, 0x30, 1, 0)   	  //Attribute ID 0x0001 = keypad lockout, Data Type: 8 bits enum
    
    return cmds + refresh()
*/
}





///////////// commands ///////////////
private sendTuyaCommand(dp, fn, data) { // everything goes through here
	log.info "sending ${zigbee.convertToHexString(rand(256), 2)}=${dp},${fn},${data}"
	zigbee.command(CLUSTER_TUYA, SETDATA, "00" + zigbee.convertToHexString(rand(256), 2) + dp + fn + data)
}

private getCLUSTER_TUYA() { 0xEF00 }
private getSETDATA() { 0x00 }

private rand(n) {
	return (new Random().nextInt(n))
} 

def off() { // this is away setting heat point
    def dp = "0404"
    def fn = "0001"
    def data = "00" // off
	log.info "Off command, this is away setting heat point ${dp}${fn}${data}"
    sendTuyaCommand(dp,fn,data)
}

def heat() { //manual and hubitat control
    updateDataValue("lastRunningMode", "heat")
    def dp = "0404"
    def fn = "0001"
    def data = "02" // on
	log.info "On/heat/manual command ${zigbee.convertToHexString(rand(256), 2)}${dp}${fn}${data}"
    sendTuyaCommand(dp,fn,data)
}

def auto() {
    updateDataValue("lastRunningMode", "heat")
    def dp = "0404"
    def fn = "0001"
    def data = "01" // auto mode, internal schdual
	log.info "auto mode, internal schdual command ${zigbee.convertToHexString(rand(256), 2)}${dp}${fn}${data}"
	sendTuyaCommand(dp,fn,data)
}

def setHeatingSetpoint(preciseDegrees) {
    log.debug "setpoint $preciseDegrees"
    def dp = "0201"
    //def dp = "0202"
    def fn = "0001"
    Integer setP = preciseDegrees / 10
    log.debug "$setP"
    //def data = zigbee.convertToHexString(setP, 2)
    def data = "15"
	log.info "Set setpoint command ${zigbee.convertToHexString(rand(256), 2)}${dp}${fn}${data}"
	sendTuyaCommand(dp,fn,data)
}

def setThermostatMode(String value) {
    switch (value) {
        case "heat":
        case "emergency heat":
            return heat()
        
        case "eco":
        case "cool":
            return eco()
        
        case "auto":
            return auto()
        
        default:
            return off()
    }
}

def updated() {
    sendEvent(name: "supportedThermostatFanModes", value: [""])
    sendEvent(name: "supportedThermostatModes", value: ["off", "heat", "auto"] )
    sendEvent(name: "thermostatFanMode", value: "auto")
    log.info "${device.displayName} updated..."
}
def installed() {
    sendEvent(name: "supportedThermostatFanModes", value: [""])
    sendEvent(name: "supportedThermostatModes", value: ["off", "heat", "auto"] )
    sendEvent(name: "thermostatFanMode", value: "auto")
    
}
void updateDataFromSimpleDescriptorData(List<String> data) {
    Map<String,String> sdi = parseSimpleDescriptorData(data)
    if(sdi != [:]) {
        updateDataValue("endpointId", sdi['endpointId'])
        updateDataValue("profileId", sdi['profileId'])
        updateDataValue("inClusters", sdi['inClusters'])
        updateDataValue("outClusters", sdi['outClusters'])
        getInfo(true, sdi)
    } else {
        log.warn("No VALID Simple Descriptor Data received!")
    }
    sdi = null
}


//unused commands and redirected
def eco() { //holiday
    updateDataValue("lastRunningMode", "cool")
    log.info "eco mode is not available for this device. => Defaulting to off mode instead."
    off()
}

def cool() {
    log.info "cool mode is not available for this device. => Defaulting to eco mode instead."
    eco()
}

def emergencyHeat() {
    log.info "emergencyHeat mode is not available for this device. => Defaulting to heat mode instead."
	heat()
}

def setCoolingSetpoint(degrees) {
    log.info "setCoolingSetpoint is not available for this device"
}

def fanAuto() {
    log.info "fanAuto mode is not available for this device"
}

def fanCirculate(){
    log.info "fanCirculate mode is not available for this device"
}

def fanOn(){
    log.info "fanOn mode is not available for this device"
}

def setSchedule(JSON_OBJECT){
    log.info "setSchedule is not available for this device"
}

def setThermostatFanMode(fanmode){
    log.info "setThermostatFanMode is not available for this device"
}
