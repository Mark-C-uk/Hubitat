/*
14/0325 ver 1
15/03/25 added dimmer control and better device handling logic
16/03/25 reduced number of lightControl.get by declaring device as a varable object[ timing used def date1 = new Date() and date1.getTime()
21/03/25 changed for to .each speed enhancment
*/
definition(
    parent: "Mark-C-UK:At Home Lights Parent",
    name: "At Home Lights",
    namespace: "Mark-C-UK",
    author: "Mark C",
    description: "switch things on and off at random",
    category: "Convenience",
    iconUrl: " ",
    iconX2Url: "",
    pausable: true
)

preferences {
    section("Set your input and output devices"){
        input "appName", "text", title: "Name this instance", submitOnChange: true, required: true
			if(appName) app.updateLabel(appName)
		input 'mastSwitch', 'capability.switch', title: 'Master switch to control the app', required: true, multiple: false
		input 'lightControl', 'capability.switch', title: 'Lights to control.', required: true, multiple: true, submitOnChange: true
        input "allOnOFF", "bool", title: "When off one light at a time will be selected randomly by the app to control. When on all lights will be swithced together per cycle, this disables dimmer setting value", defaultValue: false, submitOnChange: true
        input 'time', 'number', title: 'Time in min for lights to be on and off. Each on and off will happen by this value in minutes, with each on and off event randomized by +/- the below seconds' , required: true
        input 'timeRan', 'number', title: 'Time in seconds to randomise the lights + or - (time in seconds MUST be smaller than time to above). e.g. 2 min above and 30 sec here will have a random time selection of 1 1/2 min to 2 1/2 min', required: true
        input 'dimValue', 'number', title: 'If the device is a dimmer and you want it setting to a specific value', required: false,  submitOnChange: true
        input "logEnable", "bool", title: "Enable info logging", defaultValue: false, submitOnChange: true
        input "immediatOff", "bool", title: "When master switch turns off immediately turn off all lights", defaultValue: false, submitOnChange: true
        input "DoubleCheckAllOff", "bool", title: "After it is deactived resend the off commands at next schdauled run - belt n braces off", defaultValue: false, submitOnChange: true
    }
}

def installed() {
	installer()
}
def uninstalled(){
	unsubscribe()
    unschedule()
}
def updated() {
    log.info "${app.label} Updated"
    unsubscribe()
    installer()
}

def initialize() { // Runs on startup
    int randomSixty = 1 + (Math.random() * 58)
    log.info "Initialize running ${app.label} installer in ${randomSixty} seconds"
    runIn(randomSixty,installer)
}
    
def installer(){
    state.timeMin = time*60 // saves running the math every time
    log.info "${app.label} installer - Master = $mastSwitch, controled = $lightControl, frequency ${state.timeMin}, random range $timeRan +/-"
    if (mastSwitch != null) {
        subscribe(mastSwitch, 'switch', mastSwitchState)
        log.info "${app.label} installer subscribing"
    }
}

void mastSwitchState(evt){
    if (evt.value == 'on'){
        state.running = true
        lightSwitching()
    }
    else{
        state.running = false
        if (immediatOff == true){
            unschedule(switchControlOff)
            unschedule(lightSwitching)
            lightControl.each {
                it.off()
                if(logEnable == true) log.info "${app.label} - Master off, immediately turning off $it"
            }
        }
        else{
            if(logEnable == true) log.info "${app.label} - Master off, immediate off - run its couse and shut down"
        }
    }
}

void lightSwitching(){
    if (state.running == true){
        int randomTime = (0 - timeRan) + (Math.random() * (timeRan*2)) + state.timeMin 
        if (randomTime < 2) randomTime = 3 
        int ranNum = Math.random() * lightControl.size()
        def randomDev = lightControl.get(ranNum)
        
        if (allOnOFF == false){
            if (dimValue != null && randomDev.hasCapability("SwitchLevel") == true && dimValue != randomDev.currentlevel){
                if(logEnable == true) log.info "${app.label} - setting dimmer level to $dimValue, for $andomDev"
                randomDev.setLevel(dimValue)
            }
            randomDev.on()
            if(logEnable == true) log.info "${app.label} - ${randomDev} switched ON --> scheduled its off for ${randomTime}s"
        }
        else{
        	lightControl.each {
            	it.on()
                if(logEnable == true) log.info "${app.label} - all on/off turning on $it"
            }
            if(logEnable == true) log.info "${app.label} - switched ON all--> scheduled off for ${randomTime}s"
        }
        runIn(randomTime, switchControlOff, [data: [dev:randomDev.deviceId, time:randomTime]])
    }
    else {
        if(DoubleCheckAllOff == true) {
            lightControl.each {
                it.off()
                if(logEnable == true) log.info "${app.label} - DoubleCheckAllOff is ${DoubleCheckAllOff} belt n braces turned off $it"
            }
        }
        //log.debug "${app.label} lightSwitching - running is ${state.running} shut down"
    }
}

void switchControlOff(data){
    //log.debug "${app.label} switchControlOff data = $data"
    if (allOnOFF == false){
    	def swtchDev = lightControl.find { it.deviceId == data.dev }
    	swtchDev.off()
    	if(logEnable == true) log.info "${app.label} - ${swtchDev} switched OFF. --> Scheduling next device on for ${data.time}s, running is ${state.running}"
    	if (mastSwitch.currentSwitch == 'off'){
            state.running = false //edge case mode chnaged to disabled mode, disabling the subscription to the master switch when it was running
    	}
    }
    else{
        lightControl.each {
            it.off()
            if(logEnable == true) log.info "${app.label} - all on/off turning off $it"
        }
        if(logEnable == true) log.info "${app.label} - Scheduling next device on for ${data.time}s, running is ${state.running}"
    }
    runIn(data.time, lightSwitching)
}
