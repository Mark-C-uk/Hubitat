/*
 * Hubitat presence Ping
 *
 *  Licensed Virtual the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Change History:
 *
 *        Date        Who            What
 *        ----        ---            ----

        2021-11-05  thebearmay     Add Text Logging option
        2022-01-03    mark-c-uk    striped down to work as presance sensor
 */

metadata {
    definition (
		name: "Hubitat presence Ping", 
		namespace: "mark-c-uk", 
		author: "mark-c-uk",
	        importUrl:"",
	    	//singleThreaded: true
	) {
        capability "Actuator"
        capability "Configuration"
        capability "PresenceSensor"
        capability "Initialize"
        capability "Switch"
       
        attribute "pingData", "string"
            
    }   
}

preferences {
    input("ipAdd", "string", title: "IP address of device", required:true, submitOnChange: true)
    input("ipAddRout", "string", title: "IP address of router, to test befor sending away", submitOnChange: true)
    input("numPings", "number", title: "Number of pings to issue", defaultValue:2, required:true, submitOnChange:true, range: "1..5")
    input("pingPeriod", "number", title: "Away Ping Repeat in Seconds,Zero to disable", defaultValue: 30, required:true, submitOnChange: true)
    input("pingPeriodHome", "number", title: "Home Ping Repeat in Seconds", defaultValue: 310, required:true, submitOnChange: true)
    input("awayPeriod", "number", title: "number of missed pings to be away", defaultValue: 5, required:true, submitOnChange: true)
    input("debugEnable", "bool", title: "Enable debug logging?", defaultValue:false, submitOnChange: true)
    input("textLoggingEnabled", "bool", title: "Enable Text Logging", defaultValue:false, submitOnChange: true)
}

def installed() {
    device.updateSetting('numPings',[value:2,type:'number'])
    device.updateSetting('awayPeriod',[value:5,type:'number'])
    device.updateSetting('pingPeriod',[value:30,type:'number'])
    device.updateSetting('pingPeriodHome',[value:310,type:'number'])
    device.updateSetting('debugEnable',[value:'false',type:'bool'])
	log.trace 'installed()'
}

def configure() {
    unschedule()
    updateAttr('pingData','')
    if (device.currentValue('presence') == null) updateAttr('presence','not present')
    log.trace "${device.displayName} - configure - state away=${state.away} current presence ${device.currentValue("presence")}, updated next" 
    updated()
}

def initialize(){
    // Runs on reboot, or can be triggered manually.
    //byte randomSixty = Math.abs(new Random().nextInt() % 60)
    int randomSixty = 1 + (Math.random() * 58)
	log.info "${device.displayName} Initializing running configure in $randomSixty seconds"
    runIn(randomSixty,configure)
}
def updated(){
    state.awayCount = 0
    if (state.PP == null) state.PP = pingPeriodHome
    if (ipAdd == null){
        log.warn "${device.displayName} - no ip address"
        updateAttr('pingData', 'no Device IP address')
        state.validIP = false
    }
    else if (validIP(ipAdd) == true){
        if(settings.debugEnable == true) log.debug "${device.displayName} - Device IP address format valid"
        updateAttr('pingData', 'Device IP address format valid')
        state.validIP = true
    }
    else{
        log.warn "${device.displayName} - Device IP address format invalid"
        updateAttr('pingData', 'Device IP address format invalid')
        state.validIP = false
    }
             
    if (ipAddRout == null){
        log.warn "${device.displayName} - no ip addressvfor router"
        state.router = false
    }
    else if (validIP(ipAddRout) == true){
        if(settings.debugEnable == true) log.debug "${device.displayName} - router IP address format valid"
        state.router = true
    }
    else{
        log.warn "${device.displayName} - router IP address format invalid"
        state.router = false
    }
	if(settings.debugEnable == true) runIn(1800,logsOff)
    
    if(state.validIP == true) pinger()
    log.trace "${device.displayName} - updated with... valid IP=${state.validIP}, router checking=${state.router}, debugging=$debugEnable, number of pings to send $numPings, number of missed pings before away=$awayPeriod, ping freq- home ${pingPeriodHome} - away ${pingPeriod}"
}

def refresh() {
	unschedule(refresh)
}
def uninstalled(){
    unschedule()
}
             
def updateAttr(aKey, aValue){
    sendEvent(name:aKey, value:aValue)
}

def pinger(){ 
    // if (debugEnable == true) log.debug 'Ping initiated'
    if (state.responseReady == false){
        log.warn "${device.displayName} - pinger not ready"
        if(pingPeriod > 0) runIn(pingPeriod, 'pinger')
        return
    }
    if (sendPing(ipAdd) < 100){
        if (state.awayCount != 0 ) {
            state.PP = pingPeriodHome // when home dont ping as often
            state.awayCount = 0
        }
        if (device.currentValue('presence') != 'present'){
            updateAttr('presence','present')
            updateAttr('switch','on')
        }
        if(textLoggingEnabled == true) log.info "Presence 'present' for $ipAdd"
    }
    else {
        if (device.currentValue('presence') == 'not present'){
            if(textLoggingEnabled == true) log.info "${device.displayName} - Presence not present already $ipAdd, ${state.awayCount} number of times"
        }
        else{
            state.PP = pingPeriod
            state.awayCount += 1
            // if(debugEnable == true) log.debug "${device.displayName} - Presence not presentfor $ipAdd , NP ${state.away}"
            if (state.awayCount > awayPeriod){
                
                if (state.router == true){ // start use router option
                    if (sendPing(ipAddRout) < 100){
                        //if(textLoggingEnabled == true) log.info "Presence set to 'not present' for $ipAdd"
                        updateAttr('presence','not present')
                        updateAttr('switch','off')
                    }
                    else {
                        updateAttr('pingData','router not present')
                    }
                } //end use router option
                
                else {
                    updateAttr('presence','not present')
                    updateAttr('switch','off')
                }
                //if(settings.textLoggingEnabled == true) log.debug "not present' for $ipAdd, ${state.away} number of times"
            }
            if(textLoggingEnabled == true) log.debug "${device.displayName} - not present' for $ipAdd, ${state.awayCount} number of times"
        }
    }
    if(pingPeriod > 0) runIn(state.PP, 'pinger')
    if(textLoggingEnabled == true) log.info "${device.displayName} - Next ping in '${state.PP}' seconds"
}
             
def sendPing(ipAddress){
    //if(debugEnable == true) log.debug "${device.displayName} - Hub pinging"
    state.responseReady = false
    hubitat.helper.NetworkUtils.PingData pingData = hubitat.helper.NetworkUtils.ping(ipAddress, numPings.toInteger())
    if (pingData.packetsTransmitted.toInteger() == 0){ // 2.2.7.121 bug returns all zeroes on not found
        pingData.packetsTransmitted = numPings
        pingData.packetLoss = 100
    }
    if(textLoggingEnabled == true) log.info "${device.displayName} - Ping Stats for $ipAddress: Transmitted: ${pingData.packetsTransmitted}, Received: ${pingData.packetsReceived}, %Lost: ${pingData.packetLoss}, min= ${pingData.rttMin}, avg= ${pingData.rttAvg}, max= ${pingData.rttMax} ms"
    state.responseReady = true
    return pingData.packetLoss
}

def off(){log.warn "${device.displayName} - OFF no action"}
def on(){log.warn "${device.displayName} - ON no action"}
       
def validIP(ipAddress){
    regxPattern =/^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
    boolean match = ipAddress ==~ regxPattern
    return match
}


void logsOff(){
     device.updateSetting('debugEnable',[value:'false',type:'bool'])
}
